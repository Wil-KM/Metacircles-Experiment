// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct ValuePoint
{
    int posX;
    int posY;
    float val;
};

int2 pixelResolution;
int2 pointResolution;
float threshold;
int displayField;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Texture;
RWStructuredBuffer<ValuePoint> valuePoints;

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (displayField == 1)
    {
        int index = ((id.x * (pointResolution.x - 1)) / pixelResolution.x) * pointResolution.y + ((id.y * (pointResolution.y - 1)) / pixelResolution.y);

        ValuePoint point0 = valuePoints[index];
        ValuePoint point1 = valuePoints[index + pointResolution.y];
        ValuePoint point2 = valuePoints[index + pointResolution.y + 1];
        ValuePoint point3 = valuePoints[index + 1];

        float4 values = float4(point0.val, point1.val, point2.val, point3.val);

        float normalisedValue = saturate((values.x + values.y + values.z + values.w) / 4) / threshold;

        Texture[id.xy] = float4(normalisedValue, normalisedValue, normalisedValue, 1);
    }
    else
    {
        Texture[id.xy] = float4(0, 0, 0, 0);
    }
}