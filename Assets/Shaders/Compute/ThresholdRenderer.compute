// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct ValuePoint
{
    int posX;
    int posY;
    float val;
};

int interpolate;
int2 pixelResolution;
int2 pointResolution;
int pointSeparation;
int lineThickness;
float threshold;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Texture;
RWStructuredBuffer<ValuePoint> valuePoints;


void plotLine(int2 a, int2 b, int2 ao, int2 bo, float opacity)
{
    int2 d = int2(abs(b.x - a.x), -abs(b.y - a.y));
    int2 s = int2(sign(b.x - a.x), sign(b.y - a.y));

    int err = d.x + d.y;

    while (true)
    {
        Texture[int2(a.x, a.y)] = float4((float) a.x / pixelResolution.x, (float) a.y / pixelResolution.y, 1, 1);

        if (a.x == b.x && a.y == b.y) break;

        int e2 = 2 * err;

        if (e2 >= d.y)
        {
            if (a.x == b.x) break;

            err += d.y;
            a.x += s.x;
        }
        
        if (e2 <= d.x)
        {
            if (a.y == b.y) break;

            err += d.x;
            a.y += s.y;
        }
    }
}

void plotThickLine(int2 a, int2 da, int2 b, int2 db, int thickness)
{
    for (int i = 0; i < thickness; i++)
    {
        int offset = i - (thickness >> 1);
        plotLine(a + da * offset, b + db * offset, a, b, 1 - smoothstep(0, thickness, offset * offset));
    }
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    ValuePoint point0 = valuePoints[id.x * pointResolution.y + id.y];
    ValuePoint point1 = valuePoints[(id.x + 1) * pointResolution.y + id.y];
    ValuePoint point2 = valuePoints[(id.x + 1) * pointResolution.y + id.y + 1];
    ValuePoint point3 = valuePoints[id.x * pointResolution.y + id.y + 1];

    float4 values = float4(point0.val, point1.val, point2.val, point3.val);
    
    int msCase = (values.x >= threshold ? 1 : 0) | (values.y >= threshold ? 1 : 0) << 1 | (values.z >= threshold ? 1 : 0) << 2 | (values.w >= threshold ? 1 : 0) << 3;

    int inter01 = (smoothstep(values.x, values.y, threshold) * interpolate + 0.5 * (1 - interpolate) + id.x) * pointSeparation;
    int inter12 = (smoothstep(values.y, values.z, threshold) * interpolate + 0.5 * (1 - interpolate) + id.y) * pointSeparation;
    int inter23 = (smoothstep(values.w, values.z, threshold) * interpolate + 0.5 * (1 - interpolate) + id.x) * pointSeparation;
    int inter30 = (smoothstep(values.x, values.w, threshold) * interpolate + 0.5 * (1 - interpolate) + id.y) * pointSeparation;

    int normalisedThickness = lineThickness * 2 + 1;
    
    switch (msCase)
    {
        case 0:
        case 15:
            break;
        case 1:
        case 14:
            plotThickLine(int2(inter01, id.y * pointSeparation), int2(-1, 0), int2(id.x * pointSeparation, inter30), int2(0, -1), normalisedThickness);
            break;
        case 2:
        case 13:
            plotThickLine(int2(inter01, id.y * pointSeparation), int2(1, 0), int2((id.x + 1) * pointSeparation, inter12), int2(0, -1), normalisedThickness);
            break;
        case 3:
        case 12:
            plotThickLine(int2((id.x + 1) * pointSeparation, inter12), int2(0, 1), int2(id.x * pointSeparation, inter30), int2(0, 1), normalisedThickness);
            break;
        case 4:
        case 11:
            plotThickLine(int2((id.x + 1) * pointSeparation, inter12), int2(0, 1), int2(inter23, (id.y + 1) * pointSeparation), int2(1, 0), normalisedThickness);
            break;
        case 5:
            plotThickLine(int2(inter01, id.y * pointSeparation), int2(1, 0), int2((id.x + 1) * pointSeparation, inter12), int2(0, -1), normalisedThickness);
            plotThickLine(int2(inter23, (id.y + 1) * pointSeparation), int2(-1, 0), int2(id.x * pointSeparation, inter30), int2(0, 1), normalisedThickness);
            break;
        case 10:
            plotThickLine(int2(inter01, id.y * pointSeparation), int2(-1, 0), int2(id.x * pointSeparation, inter30), int2(0, -1), normalisedThickness);
            plotThickLine(int2((id.x + 1) * pointSeparation, inter12), int2(0, 1), int2(inter23, (id.y + 1) * pointSeparation), int2(1, 0), normalisedThickness);
            break;
        case 6:
        case 9:
            plotThickLine(int2(inter01, id.y * pointSeparation), int2(1, 0), int2(inter23, (id.y + 1) * pointSeparation), int2(1, 0), normalisedThickness);
            break;
        case 7:
        case 8:
            plotThickLine(int2(inter23, (id.y + 1) * pointSeparation), int2(-1, 0), int2(id.x * pointSeparation, inter30), int2(0, 1), normalisedThickness);
            break;
    }
}
